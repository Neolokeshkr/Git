Git Commands


$ git config credential.helper store
$ git push https://github.com/repo.git

Username for 'https://github.com': <USERNAME>
Password for 'https://USERNAME@github.com': <PASSWORD>
================================================================
1. $ git config --list --show-origin : View all setings

To configure username and email:
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com

To configure editor to make changes to the files
$ git config --global core.editor emacs

To set default branch name:
By default  master branch is created upon using git init command, This default name can be changed using:
	-$ git config --global init.defaultBranch branchName
	
To view settings
	-$git config --list
	
To check git key's values
	-$git config user.name
	-$git config --get user.name
	
Getting help in git:
	-$git help <verb> ; Ex : git help config
	-$git config --help ; Ex : git config --help
	
	Concise information (-h )
	-$git config -h

Setting up ssh on computer (it allows push without entering password everytime).
	1. Look for id_rsa or id_rsa.pub in ~/.ssh/
	2. If not present create public/private keys
		-$ssh-keygen -t rsa -C "email@example.com"
	3. Copy the contents of id_rsa.pub (using xclip "-$xclip -o").
	4. Go to settings in GitHub Account > Add SSH keys 
	5. Paste the ssh key add a label for key and click on add.
	6. To check :
		-$ ssh -T git@github.com
	
To initialise a git repository:
	-1. Creating a git repo using git init
		-$git init
		-$git add .
		-$git commit -m 'Message'
	-2. Pushing changes on githuh repo
		1. Login to GitHub Account and create a new repository.
		2. Copy the ssh_link_of_repo.
		-$git remote add origin 'ssh_link_of_repo'
		-$git push -u origin master
	-3. Cloning a git repo from somewhere
		-$git clone https://someUrl	
		-$git clone https://someUrl directoryName

To check the status of files:
	-$git status
	-$git status -s : for simplified output

To track a file/add file to git
	-$git add fileName

To ignore any file in git directory
	-Create a .gitignore file 
	-Add this .gitignore file to git using git add .gitignore
	-Define rules in the .gitignore file
		#This is a comment
		#ignore all files ending with .a 0r .o
		*.[oa]

		#ignore a single file
		/fileName

		#ignore a directory
		dirName/	

To view staged and unstaged changes:
	-git diff : Shows changes which are modified not staged
	-git diff --staged/git diff --cached : Shows changes which are staged.

Commiting changes to git:
	$git commit : Launches an editor to enter commit messages.
	$git commit -v : Shows what changes have been done.
	$git commit -m "Commit message" : Exp;icitly write comment
	$git commit -a -m "Skipping git add line" : Performs both staging and commit.

Removing Files 
	1. Remove file from directory initially
		$ rm fileName
	2. Remove file from git tracking(Stages the file removal)
		$ git rm fileName	
	3. On the next commit file will be removed from git and no longer tracked.

Viewing Commit History
	-$git log : Shows commits in reverse chronological order.
	-$git log -p -5 : Shows difference introduced in last 5 commits
	-$git log --stat
	-$git log --pretty=oneline
	-$git log --pretty=fuller
	-$git log --pretty=full
	-$git log --pretty=short
	-$git log --pretty='%s'/'%ad'/'%ae'/'%H'/'%h'/'%P'/'%p'/'%an'/'%cr'/'%T'/'%t'
	-$git log --pretty=format"%s %h %ad" : Multiple formats passed
	-$git log --pretty=full --author='authorName'
	-$git log --pretty=oneline --since="2020-11-01" --until="2020-12-01"
	-$git log --since=2.day
	-$git log --since=2.weeks	

Undoing things in git
	-$git commit -m 'Initial commit'
	-$git add forgotten_file
	-$git commit --amend

Unstaging a Staged File
	-$git reset HEAD fileName

Unmodifying a modified file
	-$git checkout -- fileName








	
